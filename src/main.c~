#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <stdlib.h>

#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int
main(int argc, char *argv[])
{
  int port     = 8080;
  int sockfd   = 0;
  int connfd   = 0;
  
  struct sockaddr_in addr = {
    .sin_family = AF_INET,
    .sin_addr.s_addr = htonl(INADDR_ANY),
    .sin_port = htons(port)
  };

  socklen_t socklen = sizeof(addr);

  /* Creating a socket for ipv4 */

  if((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
  {
    fprintf(stderr,
	    "Socket creation fad with error:\n\t %s\n",
	    strerror(errno));

    exit(EXIT_FAILURE);
  }
  fprintf(stdout, "Server created with FD: %d\n", sockfd);

  /* Setting socket options */
  int opt = 1;
  if(setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (char *) &opt, sizeof(int)) == -1)
  {
    fprintf(stderr,
	    "Cannot set socket options:\n\t REUSEADDR:%s\n",
	    strerror(errno));

    exit(EXIT_FAILURE);
  }
  fprintf(stdout, "Server options set: %d\n", opt);


  /* Binding socket to address */

  if(bind(sockfd, (struct sockaddr *)&addr, sizeof(addr)) != 0)
  {
    fprintf(stderr,
	    "Cannot bind socket to address:\n\t %s\n",
	    strerror(errno));

    exit(EXIT_FAILURE);
  }
  fprintf(stdout, "Socket bound to address: :%d\n", port);

  
  /* Listening to port */
  
  if(listen(sockfd, 5) != 0)
  {
    fprintf(stderr,
	    "Cannot listen to port:\n\t %s\n",
	    strerror(errno));

    exit(EXIT_FAILURE);
  }
  fprintf(stdout, "Listening to port: %d\n", port);

  char  buff[1024*10];
  const char *hello =
    "HTTP/1.1 200 OK\r\n"
    "Content-Type: text/plain; charset=utf-8\r\n"
    "Content-Length: 14\r\n"
    "\r\n"
    "Hello world!\r\n";
  	    

  fprintf(stdout, "\nHandling Requests: \n\n");
  while(1)
  {
   /* Accept client */
  
    if((connfd = accept(sockfd, (struct sockaddr*)&addr, &socklen)) == -1 )
    {
      fprintf(stderr,
  	    "Cannot accept client:\n\t %s\n",
   	    strerror(errno));
      exit(EXIT_FAILURE);
    }
    
    int pid = 0;
    if((pid = fork()) == 0)
    {
      fprintf(stdout, "Request handled\n");

      read(connfd, buff, sizeof(buff));   
      send(connfd, hello, strlen(hello), 0);
   
      close(connfd); 
      break;
    }
    else
    {
      if(pid == -1)
      {
	fprintf(stderr,
		"Cannot handle requests:\n\t %s\n",
		strerror(errno));
      }
      else
      {
	fprintf(stdout,
		"Processing requests for(PID=%d)\n",
		pid);
      }
      
      close(connfd);
    }
  }
     
  close(sockfd);
  return 0;
}
